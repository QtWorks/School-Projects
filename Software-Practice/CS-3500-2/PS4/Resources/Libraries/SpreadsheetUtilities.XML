<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SpreadsheetUtilities</name>
    </assembly>
    <members>
        <member name="T:SpreadsheetUtilities.DependencyGraph">
             <summary>
             (s1,t1) is an ordered pair of strings
             s1 depends on t1 --> t1 must be evaluated before s1
             
             A DependencyGraph can be modeled as a set of ordered pairs of strings.  Two ordered pairs
             (s1,t1) and (s2,t2) are considered equal if and only if s1 equals s2 and t1 equals t2.
             (Recall that sets never contain duplicates.  If an attempt is made to add an element to a 
             set, and the element is already in the set, the set remains unchanged.)
             
             Given a DependencyGraph DG:
             
                (1) If s is a string, the set of all strings t such that (s,t) is in DG is called dependents(s).
                    
                (2) If s is a string, the set of all strings t such that (t,s) is in DG is called dependees(s).
            
             For example, suppose DG = {("a", "b"), ("a", "c"), ("b", "d"), ("d", "d")}
                 dependents("a") = {"b", "c"}
                 dependents("b") = {"d"}
                 dependents("c") = {}
                 dependents("d") = {"d"}
                 dependees("a") = {}
                 dependees("b") = {"a"}
                 dependees("c") = {"a"}
                 dependees("d") = {"b", "d"}
             </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.#ctor">
            <summary>
            Creates an empty DependencyGraph.
            </summary>
        </member>
        <member name="P:SpreadsheetUtilities.DependencyGraph.Size">
            <summary>
            The number of ordered pairs in the DependencyGraph.
            </summary>
        </member>
        <member name="P:SpreadsheetUtilities.DependencyGraph.Item(System.String)">
            <summary>
            The size of dependees(s).
            This property is an example of an indexer.  If dg is a DependencyGraph, you would
            invoke it like this:
            dg["a"]
            It should return the size of dependees("a")
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.HasDependents(System.String)">
            <summary>
            Reports whether dependents(s) is non-empty.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.HasDependees(System.String)">
            <summary>
            Reports whether dependees(s) is non-empty.
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.GetDependents(System.String)">
            <summary>
            Enumerates dependents(s).
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.GetDependees(System.String)">
            <summary>
            Enumerates dependees(s).
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.AddDependency(System.String,System.String)">
             <summary>
             <para>Adds the ordered pair (s,t), if it doesn't exist</para>
             
             <para>This should be thought of as:</para>   
             
               s depends on t
            
             </summary>
             <param name="s"> s cannot be evaluated until t is</param>
             <param name="t"> t must be evaluated first.  S depends on T</param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.RemoveDependency(System.String,System.String)">
            <summary>
            Removes the ordered pair (s,t), if it exists
            </summary>
            <param name="s"></param>
            <param name="t"></param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.ReplaceDependents(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes all existing ordered pairs of the form (s,r).  Then, for each
            t in newDependents, adds the ordered pair (s,t).
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.ReplaceDependees(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes all existing ordered pairs of the form (r,s).  Then, for each 
            t in newDependees, adds the ordered pair (t,s).
            </summary>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.ReplaceDictionaries(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}})">
            <summary>
            Takes in a string and it's replacements and replaces it's dependendents/dependees 
            from the left dictionary in the form (s,t) and from the right dictionary in the form (t,s)
            </summary>
            <param name="s">String key to remove current dependents/dependees</param>
            <param name="replacements">List of replacements</param>
            <param name="left">To replace in the form (s,t)</param>
            <param name="right">To replace in the form (t,s)</param>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.TestContains(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}})">
            <summary>
            Tests whether the key s in the Dictionary testDic has any value in its resulting List/<string/>
            </summary>
            <param name="s">Test Key</param>
            <param name="testDic">List to check</param>
            <returns></returns>
        </member>
        <member name="M:SpreadsheetUtilities.DependencyGraph.GetIEnumerable(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}})">
            <summary>
            Takes in a string and dictionary and returns an List of the resulting value to the s key
            </summary>
            <param name="s">Key to check</param>
            <param name="testDic">Dictionary to pass key</param>
            <returns></returns>
        </member>
    </members>
</doc>
